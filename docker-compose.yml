services:
  app:
    build: .
    ports:
      - "8080:1323"
    environment:
      APP_ENV: staging
      APP_PORT: 1323
      DATABASE_URL: postgres://postgres:postgres@db:5432/database?sslmode=disable
      MAX_OPEN_CONN: 20
      MAX_IDDLE_CONN: 5
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
  db:
    platform: linux/x86_64
    image: postgres:14.1-alpine
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: database
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - db:/var/lib/postgresql/data
      # Load database schema from ./database.sql
      # If you want to reload new database schema, you need to execute
      # `docker-compose down --volumes` first to remove the volume.
      - ./database.sql:/docker-entrypoint-initdb.d/database.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"  # RabbitMQ main service
      - "15672:15672"  # RabbitMQ Management UI
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running"]
      interval: 10s
      timeout: 5s
      retries: 3
volumes:
  db:
    driver: local
